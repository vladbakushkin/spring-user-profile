{
	"info": {
		"_postman_id": "659a9e31-7eed-4c77-88a8-5fe4a38aeee4",
		"name": "New Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25474611"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "sign-up",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: token\", function () {\r",
									"    pm.expect(responseJson).to.have.property('token');\r",
									"});\r",
									"\r",
									"pm.test(\"Set token to variable\", () => {\r",
									"    pm.collectionVariables.set(\"token\", responseJson.token);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"admin\",\r\n    \"lastName\": \"Petrov\",\r\n    \"firstName\": \"Petr\",\r\n    \"middleName\": \"Petrocivh\",\r\n    \"birthDate\": \"1960-01-01\",\r\n    \"email\": \"petrov@email.com\",\r\n    \"phone\": \"79111230000\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/sign-up",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"sign-up"
							]
						}
					},
					"response": []
				},
				{
					"name": "sign-in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Set token to variable\", () => {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.collectionVariables.set(\"token\", responseJson.token);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/auth/sign-in",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"auth",
								"sign-in"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "create user lastname null - fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
							"    pm.response.to.be.badRequest;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"Petr\",\r\n    \"middleName\": \"Petrocivh\",\r\n    \"birthDate\": \"1960-01-01\",\r\n    \"email\": \"petrov@email.com\",\r\n    \"phone\": \"79111230000\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/auth/sign-up",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth",
						"sign-up"
					]
				}
			},
			"response": []
		},
		{
			"name": "create user firstname null - fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
							"    pm.response.to.be.badRequest;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\": \"Petrov\",\r\n    \"middleName\": \"Petrocivh\",\r\n    \"birthDate\": \"1960-01-01\",\r\n    \"email\": \"petrov@email.com\",\r\n    \"phone\": \"79111230000\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/auth/sign-up",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth",
						"sign-up"
					]
				}
			},
			"response": []
		},
		{
			"name": "create user email null - fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
							"    pm.response.to.be.badRequest;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\": \"Petrov\",\r\n    \"firstName\": \"Petr\",\r\n    \"middleName\": \"Petrocivh\",\r\n    \"birthDate\": \"1960-01-01\",\r\n    \"phone\": \"79111230000\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/auth/sign-up",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth",
						"sign-up"
					]
				}
			},
			"response": []
		},
		{
			"name": "create user phone null - fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
							"    pm.response.to.be.badRequest;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\": \"Petrov\",\r\n    \"firstName\": \"Petr\",\r\n    \"middleName\": \"Petrocivh\",\r\n    \"birthDate\": \"1960-01-01\",\r\n    \"email\": \"petrov@email.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/auth/sign-up",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth",
						"sign-up"
					]
				}
			},
			"response": []
		},
		{
			"name": "create user email duplicate - fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
							"    pm.response.to.be.badRequest;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\": \"Petrov\",\r\n    \"firstName\": \"Petr\",\r\n    \"middleName\": \"Petrocivh\",\r\n    \"birthDate\": \"1960-01-01\",\r\n    \"email\": \"petrov@email.com\",\r\n    \"phone\": \"79111230000\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/auth/sign-up",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth",
						"sign-up"
					]
				}
			},
			"response": []
		},
		{
			"name": "create user phone duplicate - fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
							"    pm.response.to.be.badRequest;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\": \"Petrov\",\r\n    \"firstName\": \"Petr\",\r\n    \"middleName\": \"Petrocivh\",\r\n    \"birthDate\": \"1960-01-01\",\r\n    \"email\": \"ivanov@email.com\",\r\n    \"phone\": \"79111230000\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/auth/sign-up",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth",
						"sign-up"
					]
				}
			},
			"response": []
		},
		{
			"name": "create user with wrong email - fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
							"    pm.response.to.be.badRequest;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\": \"Petrov\",\r\n    \"firstName\": \"Petr\",\r\n    \"middleName\": \"Petrocivh\",\r\n    \"birthDate\": \"1960-01-01\",\r\n    \"email\": \"petrovemail.com\",\r\n    \"phone\": \"79111230000\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/auth/sign-up",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth",
						"sign-up"
					]
				}
			},
			"response": []
		},
		{
			"name": "find user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const response = pm.response.json();",
							"",
							"pm.test(\"Пользователь должен содержать поля: id, lastName, firstName, middleName, birthDate, email, phone, username\", function () {",
							"    pm.expect(response).to.have.property('id');",
							"    pm.expect(response).to.have.property('lastName');",
							"    pm.expect(response).to.have.property('firstName');",
							"    pm.expect(response).to.have.property('middleName');",
							"    pm.expect(response).to.have.property('birthDate');",
							"    pm.expect(response).to.have.property('email');",
							"    pm.expect(response).to.have.property('phone');",
							"    pm.expect(response).to.have.property('username');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/users/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "update lastname user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const response = pm.response.json();",
							"",
							"pm.test(\"Пользователь должен содержать поля: id, lastName, firstName, middleName, birthDate, email, phone, username\", function () {",
							"    pm.expect(response).to.have.property('id');",
							"    pm.expect(response).to.have.property('lastName');",
							"    pm.expect(response).to.have.property('firstName');",
							"    pm.expect(response).to.have.property('middleName');",
							"    pm.expect(response).to.have.property('birthDate');",
							"    pm.expect(response).to.have.property('email');",
							"    pm.expect(response).to.have.property('phone');",
							"    pm.expect(response).to.have.property('username');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(response.id).to.not.be.null;",
							"    pm.expect(source.lastName).equal(response.lastName, 'lastName должен соответствовать отправленному в запросе');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\": \"Ivanov\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/users/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const response = pm.response.json();",
							"",
							"pm.test(\"Пользователи должны содержать поля: id, lastName, firstName, middleName, birthDate, email, phone, username\", function () {",
							"    pm.expect(response[0]).to.have.property('id');",
							"    pm.expect(response[0]).to.have.property('lastName');",
							"    pm.expect(response[0]).to.have.property('firstName');",
							"    pm.expect(response[0]).to.have.property('middleName');",
							"    pm.expect(response[0]).to.have.property('birthDate');",
							"    pm.expect(response[0]).to.have.property('email');",
							"    pm.expect(response[0]).to.have.property('phone');",
							"    pm.expect(response[0]).to.have.property('username');",
							"});",
							"",
							"pm.test(\"Должен быть найден только один пользователь\", function () {",
							"    pm.expect(response.length).to.eql(1);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/users",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:8080/users/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"disabled": true
		},
		{
			"key": "token",
			"value": ""
		}
	]
}